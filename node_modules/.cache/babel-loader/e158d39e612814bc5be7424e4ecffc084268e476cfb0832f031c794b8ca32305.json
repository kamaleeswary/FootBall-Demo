{"ast":null,"code":"import axios from 'axios';\nexport async function login() {\n  return axios.get('https://jsonplaceholder.typicode.com/users').then(res => {\n    this.posts = res.data;\n    return this.posts;\n  });\n\n  //   if (!response.ok) {\n  //     throw new Error(data.message || 'Could not fetch quotes.');\n  //   }\n\n  //   const transformedQuotes = [];\n\n  //   for (const key in data) {\n  //     const quoteObj = {\n  //       id: key,\n  //       ...data[key],\n  //     };\n\n  //     transformedQuotes.push(quoteObj);\n  //     console.log(transformedQuotes, 'res');\n  //   }\n\n  //   return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FDOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FDOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FDOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FDOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n  const transformedComments = [];\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}","map":{"version":3,"names":["axios","login","get","then","res","posts","data","getSingleQuote","quoteId","response","fetch","FDOMAIN","json","ok","Error","message","loadedQuote","id","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","key","commentObj","push"],"sources":["/home/kamaleeswary/workspace/food-ball-demo-app/src/lib/Api.js"],"sourcesContent":["import axios from 'axios';\n\n\nexport async function login() {\n    return axios.get('https://jsonplaceholder.typicode.com/users')\n    .then(res => {\n      this.posts = res.data;\n      return this.posts;\n    })\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   const transformedQuotes = [];\n\n//   for (const key in data) {\n//     const quoteObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedQuotes.push(quoteObj);\n//     console.log(transformedQuotes, 'res');\n//   }\n\n//   return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FDOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FDOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FDOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FDOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,OAAO,eAAeC,KAAK,GAAG;EAC1B,OAAOD,KAAK,CAACE,GAAG,CAAC,4CAA4C,CAAC,CAC7DC,IAAI,CAACC,GAAG,IAAI;IACX,IAAI,CAACC,KAAK,GAAGD,GAAG,CAACE,IAAI;IACrB,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC,CAAC;;EAEN;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;AACA;;AAEA,OAAO,eAAeE,cAAc,CAACC,OAAO,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAQ,WAAUH,OAAQ,OAAM,CAAC;EACjE,MAAMF,IAAI,GAAG,MAAMG,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACS,OAAO,IAAI,wBAAwB,CAAC;EAC3D;EAEA,MAAMC,WAAW,GAAG;IAClBC,EAAE,EAAET,OAAO;IACX,GAAGF;EACL,CAAC;EAED,OAAOU,WAAW;AACpB;AAEA,OAAO,eAAeE,QAAQ,CAACC,SAAS,EAAE;EACxC,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAQ,cAAa,EAAE;IACrDS,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;IAC/BK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMlB,IAAI,GAAG,MAAMG,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACS,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,eAAeU,UAAU,CAACC,WAAW,EAAE;EAC5C,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAQ,aAAYe,WAAW,CAAClB,OAAQ,OAAM,EAAE;IAC9EY,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW,CAACC,WAAW,CAAC;IAC7CH,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMlB,IAAI,GAAG,MAAMG,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACS,OAAO,IAAI,wBAAwB,CAAC;EAC3D;EAEA,OAAO;IAAEa,SAAS,EAAEtB,IAAI,CAACuB;EAAK,CAAC;AACjC;AAEA,OAAO,eAAeC,cAAc,CAACtB,OAAO,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAQ,aAAYH,OAAQ,OAAM,CAAC;EAEnE,MAAMF,IAAI,GAAG,MAAMG,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACR,IAAI,CAACS,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,MAAMgB,mBAAmB,GAAG,EAAE;EAE9B,KAAK,MAAMC,GAAG,IAAI1B,IAAI,EAAE;IACtB,MAAM2B,UAAU,GAAG;MACjBhB,EAAE,EAAEe,GAAG;MACP,GAAG1B,IAAI,CAAC0B,GAAG;IACb,CAAC;IAEDD,mBAAmB,CAACG,IAAI,CAACD,UAAU,CAAC;EACtC;EAEA,OAAOF,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}